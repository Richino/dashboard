if (row < schedule2[col].tasks.length && schedule2[col].tasks.length !== 0) {
   // Existing tasks
   const startRow = schedule2[col].tasks[row].start;
   const spanRows = schedule2[col].tasks[row].span;
   return (
      <div
         key={`${col}-${row}`}
         className={`h-full truncate border-b border-neutral-200 p-4 py-3 line-clamp-1 hover:cursor-pointer hover:bg-neutral-100 dark:border-neutral-800 dark:hover:bg-neutral-900`}
         style={{ gridRow: `${startRow} / span ${spanRows}` }}>
         <div
            className={`h-full rounded-md px-2 py-1 ${taskColors[schedule2[col].tasks[row].task][0]} ${taskColors[schedule2[col].tasks[row].task][1]}`}>
            <p className="truncate">{schedule2[col].tasks[row].task}</p>
            <p className="truncate text-xs ">{`${schedule2[col].tasks[row].from} - ${schedule2[col].tasks[row].to}`}</p>
         </div>
      </div>
   );
} else {
   // Empty cells
   //make a condition oif it already happened

   elements.push(
      <div
         onClick={(event) => handleAddTask(row, col, event)}
         key={`${col}-${row}`}
         data-index={row + 1}
         className={`${
            row < getRowLength(col) - 1 && "border-b"
         } h-full truncate ${col}-${row} border-neutral-200 p-2 line-clamp-1 hover:cursor-pointer hover:bg-neutral-100 dark:border-neutral-800 dark:hover:bg-neutral-900`}>
         <div className={`h-full rounded-md px-2 py-1 text-black`}>{row + 1}</div>
      </div>
   );
   if (row === 35) {
      let length = 0;
      schedule2[col].tasks.map((key: any, index: any) => {
         length += key.span;
      });
      console.log(length);
      elementsCol.push(elements);
      if (elements.length != 36) elements.length = 36 - length;

      setEmptyGrids((prevEmptyGrids) => [...prevEmptyGrids, elements]);
      console.log(elementsCol);

      return elementsCol[col];
   }
}